---
{% for k, v in frontmatter.items() %}
{{k}}: {% if v is number or v is boolean %}{{v}}{% else %}"{{v}}"{% endif %}

{% endfor %}
---

{{doc.title}}
====================

{% if lang == "nl" %}
**Versie:** {{doc.version}}

**Vorige versie:** {{doc.prior_version}}

**Aangemaakt op:** {{doc.created}}

**Laatst aangepast op:** {{doc.modified}}

**SHACL-bestand:** [{{rdf_filename}}]({{rdf_filename}})

**Andere talen:**
{% for lang in languages %}
{% if loop.index > 1 %}, {% endif %}[{{lang}}](../{{lang}})
{% endfor %}

**Auteurs:**
{% for author in doc.authors %}
{% if loop.index > 1 %}, {% endif %}[{{author.label}}](mailto:{{author.email}})
{% endfor %}
{% elif lang == "en" %}
**Version:** {{doc.version}}

**Prior version:** {{doc.prior_version}}

**Created:** {{doc.created}}

**Last modified:** {{doc.modified}}

**SHACL file:** [{{rdf_filename}}]({{rdf_filename}})

**Other languages:**
{% for lang in languages %}
{% if loop.index > 1 %}, {% endif %}[{{lang}}](../{{lang}})
{% endfor %}

**Authors:**
{% for author in doc.authors %}
{% if loop.index > 1 %}, {% endif %}[{{author.label}}](mailto:{{author.email}})
{% endfor %}
{% elif lang == "fr" %}
**Version:** {{doc.version}}

**Version précédente:** {{doc.prior_version}}

**Créé:** {{doc.created}}

**Dernière mise à jour:** {{doc.modified}}

**Fichier SHACL:** [{{rdf_filename}}]({{rdf_filename}})

**Autres langues:**
{% for lang in languages %}
{% if loop.index > 1 %}, {% endif %}[{{lang}}](../{{lang}})
{% endfor %}

**Auteurs:**
{% for author in doc.authors %}
{% if loop.index > 1 %}, {% endif %}[{{author.label}}](mailto:{{author.email}})
{% endfor %}
{% endif %}

{{doc.description}}

<div class="wrap">
  <div class="zoom">
  {{diagramText}}
  </div>
</div>

{% if lang == "nl" %}
## Naamruimten
{% elif lang == "en" %}
## Namespaces
{% elif lang == "fr" %}
## Espace de noms
{% endif %}

| Prefix | URI      |
| :----- | :------- |
{% for prefix, iri in namespaces|sort %}
| {{ prefix }}     | [{{iri}}]({{iri}}) |
{% endfor %}

{% if lang == "nl" %}
## Klassen & Eigenschappen
{% elif lang == "en" %}
## Classes & Properties
{% elif lang == "fr" %}
## Classes & Propriétés
{% endif %}

{% if lang == "nl" %}
**Klassen:** 
{% elif lang == "en" %}
**Classes:** 
{% elif lang == "fr" %}
**Classes:** 
{% endif %}
{% for class in classes %}
{% if loop.index > 1 %} | {% endif %} [{{class.label}}](#{{class.shortname|urlencode}})
{% endfor %}

{% for class in classes %}
## <a id="{{class.shortname|urlencode}}"></a>{{class.label}} <small>[({{class.shortname}})]({{class.iri}})</small>

{# **URI:** [{{class.shortname}}]({{class.iri}}) <br> #}
{% if class.superclasses is defined and class.superclasses|length > 0 %}

{% if lang == "nl" %}
**Subklasse van:** 
{% elif lang == "en" %}
**Subclass of:** 
{% elif lang == "fr" %}
**Sous-classe de:** 
{% endif %}
{% for parent in class.superclasses %}
[{{parent.label}}](#{{parent.shortname|urlencode}})
{% endfor %}
{% endif %}
{% if class.subclasses is defined and class.subclasses|length > 0%}

{% if lang == "nl" %}
**Subklassen:** 
{% elif lang == "en" %}
**Subclasses:** 
{% elif lang == "fr" %}
**Sous-classes:** 
{% endif %}
{% for child in class.subclasses %}
{% if loop.index > 1 %}, {% endif %}[{{child.label}}](#{{child.shortname|urlencode}})
{% endfor %}
{% endif %}

{{class.description if class.description is not none }}

{% if class.properties|length > 0%}
{% if lang == "nl" %}
| Eigenschap | Beschrijving | Kardinaliteit | Datatype |
{% elif lang == "en" %}
| Property | Description | Cardinality | Datatype |
{% elif lang == "fr" %}
| Propriété | Description | Cardinalité | Type de données |
{% endif %}
| :------ | :---------- | :---------- | :------- |
{% for property in class.properties %}
| <a id='{{property.shortname|urlencode}}'></a>{{property.label}} <br> <small>[({{property.shortname}})]({{property.iri}})</small> | {{property.description if property.description is not none}} | `{{property.min if property.min is not none else '0'}}..{{property.max if property.max is not none else 'n'}}` | {% for datatype in property.datatypes -%}{% if loop.index > 1 %} _or_ {% endif %}{% if datatype.type == "class" %}[{{datatype.label}}](#{{datatype.shortname|urlencode}}){% else %}[`{{datatype.shortname}}`]({{datatype.iri}}){% endif %}{% endfor %} {% if property.value_list | length > 0 %}<br>_Possible values: {% for value in property.value_list -%}{% if loop.index > 1 %}, {% endif %}[`{{value.shortname}}`]({{value.iri}}){% endfor %}_{% endif %} |
{% endfor %}
{% endif %}

{% for parent in class.superclasses %}
{% if parent.properties|length > 0 %}
{% if lang == "nl" %}
_Eigenschappen van [{{parent.label}}](#{{parent.shortname|urlencode}}):_ {% for property in parent.properties %}{% if loop.index > 1 %}, {% endif %} [{{property.label}}](#{{property.shortname|urlencode}}){% endfor %}
{% elif lang == "en" %}
_Properties from [{{parent.label}}](#{{parent.shortname|urlencode}}):_ {% for property in parent.properties %}{% if loop.index > 1 %}, {% endif %} [{{property.label}}](#{{property.shortname|urlencode}}){% endfor %}
{% elif lang == "fr" %}
_Propriétés de [{{parent.label}}](#{{parent.shortname|urlencode}}):_ {% for property in parent.properties %}{% if loop.index > 1 %}, {% endif %} [{{property.label}}](#{{property.shortname|urlencode}}){% endfor %}
{% endif %}
{% endif %}
{% endfor %}

{% endfor %}

<style>
.zoom > svg {
    width: 100%;
    height: auto;
    background-color: #fff;
}

.zoom > svg text{
   -webkit-user-select: none;
   -moz-user-select: none;
   -ms-user-select: none;
   user-select: none;
}

.wrap {
  overflow: hidden;
  border: 1px solid #E6E6E6;
}

.zoom {
  position: relative;
}

.zoom:hover {
  transform: scale(2.0); cursor: grab;
}

</style>
<script>
var svg = document.querySelector('svg[zoomAndPan="magnify"]');
var zoomDiv = document.querySelector('.zoom');
zoomDiv.addEventListener('mouseleave', onMouseOutZoomDiv);
if (window.PointerEvent) {
  svg.addEventListener('pointerdown', onPointerDown);
  svg.addEventListener('pointerup', onPointerUp);
  svg.addEventListener('pointerleave', onPointerUp); 
  svg.addEventListener('pointermove', onPointerMove); 
} else {

  svg.addEventListener('mousedown', onPointerDown); 
  svg.addEventListener('mouseup', onPointerUp); 
  svg.addEventListener('mouseleave', onPointerUp); 
  svg.addEventListener('mousemove', onPointerMove); 

  svg.addEventListener('touchstart', onPointerDown);
  svg.addEventListener('touchend', onPointerUp);
  svg.addEventListener('touchmove', onPointerMove); 
}

function getPointFromEvent (event) {
  var point = {x:0, y:0};
  if (event.targetTouches) {
    point.x = event.targetTouches[0].clientX;
    point.y = event.targetTouches[0].clientY;
  } else {
    point.x = event.clientX;
    point.y = event.clientY;
  }
  
  return point;
}

var isPointerDown = false;

var pointerOrigin = {
  x: 0,
  y: 0
};

function onPointerDown(event) {
  isPointerDown = true; 
  
  var pointerPosition = getPointFromEvent(event);
  pointerOrigin.x = pointerPosition.x;
  pointerOrigin.y = pointerPosition.y;
}

var originalViewBoxString = svg.getAttribute('viewBox');
var originalViewBoxList= svg.viewBox.baseVal;

var originalViewBox = {
    x: originalViewBoxList.x,
    y: originalViewBoxList.y,
    width: originalViewBoxList.width,
    height: originalViewBoxList.height
};

var viewBox = structuredClone(originalViewBox);
console.log(viewBox);
var newViewBox = {
  x: 0,
  y: 0
};

var ratio = viewBox.width / svg.getBoundingClientRect().width;
window.addEventListener('resize', function() {
  ratio = viewBox.width / svg.getBoundingClientRect().width;
});

function onPointerMove (event) {
  if (!isPointerDown) {
    return;
  }
  event.preventDefault();

  var pointerPosition = getPointFromEvent(event);

  newViewBox.x = viewBox.x - ((pointerPosition.x - pointerOrigin.x) * ratio);
  newViewBox.y = viewBox.y - ((pointerPosition.y - pointerOrigin.y) * ratio);

  var viewBoxString = `${newViewBox.x} ${newViewBox.y} ${viewBox.width} ${viewBox.height}`;
  svg.setAttribute('viewBox', viewBoxString);
}

function onPointerUp() {
  isPointerDown = false;

  viewBox.x = newViewBox.x;
  viewBox.y = newViewBox.y;
}
function onMouseOutZoomDiv(event) {

  var viewBoxString = structuredClone(originalViewBoxString);
  viewBox.x = 0;
  viewBox.y = 0;
  svg.setAttribute('viewBox', originalViewBoxString);
}

</script>
